{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport test_mesh from \"temp_models/mesh.ply\";\n\n// export default function ModelViewer() {\n//     const plyLoader = useLoader(PLYLoader, test_mesh);\n//     return(\n//         <Canvas>\n//             <mesh geometry={plyLoader} />\n//         </Canvas>\n//     );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar container;\nvar camera, scene, renderer, controls, loader;\nexport default function ModelViewer() {\n  _s();\n  function init() {\n    //Creating the container for the ply\n    container = document.createElement(\"div\");\n    document.getElementById(\"test-render\").appendChild(container);\n\n    //initializing the camera\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n    camera.position.z = 2;\n    camera.position.set(1, 1, 1);\n\n    //initializing the scene\n    scene = new THREE.Scene();\n    scene.add(new THREE.AxesHelper(30));\n\n    //initializing renderer\n    renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    //size of viewport (width, height) grab size of container and set it to renderer\n    renderer.setSize(document.getElementById('test-render').clientWidth, document.getElementById('test-render').clientHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    //adding renderer to DOM\n    container.appendChild(renderer.domElement);\n\n    //initializing interactive controls\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n\n    //rendering ply file\n    const plyLoader = new PLYLoader();\n    plyLoader.load(test_mesh, function (geometry) {\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        vertexColors: true\n      });\n      const mesh = new THREE.Points(geometry, material);\n      mesh.rotateX(-Math.PI / 2);\n      scene.add(mesh);\n    },\n    // called when loading is in progress\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    },\n    // called when loading has errors\n    function (error) {\n      console.log(\"An error happened\");\n      console.log(error);\n    });\n  }\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n    controls.update();\n  }\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered) {\n      init();\n      animate();\n      rendered = true;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"test-render\",\n    style: {\n      width: '100%',\n      flex: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}\n_s(ModelViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["useEffect","THREE","Canvas","useLoader","PLYLoader","OrbitControls","test_mesh","container","camera","scene","renderer","controls","loader","ModelViewer","init","document","createElement","getElementById","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","z","set","Scene","add","AxesHelper","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","clientWidth","clientHeight","outputEncoding","sRGBEncoding","domElement","update","plyLoader","load","geometry","material","PointsMaterial","size","vertexColors","mesh","Points","rotateX","Math","PI","xhr","console","log","loaded","total","error","animate","requestAnimationFrame","render","rendered","width","flex"],"sources":["/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport test_mesh from \"temp_models/mesh.ply\";\n\n// export default function ModelViewer() {\n//     const plyLoader = useLoader(PLYLoader, test_mesh);\n//     return(\n//         <Canvas>\n//             <mesh geometry={plyLoader} />\n//         </Canvas>\n//     );\n// }\n\nvar container;\nvar camera, scene, renderer, controls, loader;\n\nexport default function ModelViewer() {\n\n    function init() {\n        //Creating the container for the ply\n        container = document.createElement(\"div\");\n        document.getElementById(\"test-render\").appendChild(container);\n      \n        //initializing the camera\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n        camera.position.z = 2;\n        camera.position.set(1, 1, 1);\n      \n        //initializing the scene\n        scene = new THREE.Scene();\n        scene.add(new THREE.AxesHelper(30));\n      \n        //initializing renderer\n        renderer = new THREE.WebGLRenderer({ alpha: true });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        //size of viewport (width, height) grab size of container and set it to renderer\n        renderer.setSize(document.getElementById('test-render').clientWidth, document.getElementById('test-render').clientHeight);\n        renderer.outputEncoding = THREE.sRGBEncoding;\n      \n        //adding renderer to DOM\n        container.appendChild(renderer.domElement);\n      \n        //initializing interactive controls\n        controls = new OrbitControls(camera, renderer.domElement);\n        controls.update();\n      \n        //rendering ply file\n        const plyLoader = new PLYLoader();\n      \n        plyLoader.load(\n          test_mesh,\n          function (geometry) {\n              const material = new THREE.PointsMaterial({ size: 0.01, vertexColors: true });\n            const mesh = new THREE.Points(geometry, material);\n            mesh.rotateX(-Math.PI / 2);\n            scene.add(mesh);\n          },\n          // called when loading is in progress\n          function (xhr) {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n          },\n          // called when loading has errors\n          function (error) {\n            console.log(\"An error happened\");\n            console.log(error);\n          }\n        );\n      }\n      \n      function animate() {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n        controls.update();\n      }\n      \n      \n\n    let rendered = false;\n    useEffect(() => {\n        if (!rendered) {\n            init();\n            animate();\n            rendered = true;\n        }\n        \n    }, []);\n  return <div id=\"test-render\" style={{width: '100%', flex: '100%'}}></div>;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}