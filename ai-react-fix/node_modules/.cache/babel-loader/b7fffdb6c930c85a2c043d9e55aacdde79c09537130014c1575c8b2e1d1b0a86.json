{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/OpenAI/ai-react-fix/src/pages/home/Prompt.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SET_MESHID, TOGGLE_DISPLAY_MODE, CLEAR_MESH_STATUS } from \"redux/slices/homeSlice\";\nimport { FETCH_URL } from \"utils/globalVariables\";\nimport io from \"socket.io-client\";\nimport FlexRow from \"layout/FlexRow\";\nimport styles from './home.module.css';\nimport question_icon from 'images/question.png';\nimport info_icon from 'images/info.png';\nimport { ADD_MESH_STATUS } from \"redux/slices/homeSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(FETCH_URL, {\n  cors: {\n    origin: FETCH_URL,\n    credentials: true\n  }\n});\nexport default function Prompt() {\n  _s();\n  const dispatch = useDispatch();\n  const density = useSelector(state => state.home.density);\n  const resolution = useSelector(state => state.home.resolution);\n  //changed to websocket using flask-socketio on the backend and socket.io-client on the frontend\n  function handleSubmit(e) {\n    e.preventDefault();\n    dispatch(CLEAR_MESH_STATUS());\n    const data = new FormData(e.target);\n    const prompt = data.get('prompt-form');\n    console.log(prompt);\n    let payload = JSON.stringify({\n      prompt: prompt,\n      density: density,\n      resolution: resolution\n    });\n    //websocket for sending prompt to backend\n    socket.emit('generate mesh', payload);\n  }\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered) {\n      socket.on('connect', () => {\n        dispatch(SET_MESHID(4));\n        console.log('connected');\n      });\n      socket.on('disconnect', () => {\n        console.log('disconnected');\n      });\n      socket.on('mesh id', data => {\n        dispatch(SET_MESHID(data.mesh_id));\n        console.log(data);\n      });\n      socket.on('model status', data => {\n        dispatch(ADD_MESH_STATUS(data.status));\n        console.log(data.status);\n      });\n      socket.on('display mode', data => {\n        dispatch(TOGGLE_DISPLAY_MODE(data.display));\n      });\n      return () => {\n        socket.off('connect');\n        socket.off('disconnect');\n        socket.off('mesh id');\n      };\n    }\n    rendered = true;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: styles[\"prompt\"],\n    children: [/*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: question_icon,\n        id: styles['question-img'],\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles['tooltip'],\n        id: styles['question-tooltip'],\n        children: \"Type in a full descriptive sentence, as if you were writing a caption for a photo. Include as much detail as you see fit, including colors, styles, and emotions. Then click Generate to get your image.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: info_icon,\n        id: styles['info-img'],\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles['tooltip'],\n        id: styles['info-tooltip'],\n        children: \"This application uses a text to image AI model to generate meshes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(FlexRow, {\n        gap: '15px',\n        alignItems: 'center',\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"prompt-form\",\n          id: \"prompt-form\",\n          defaultValue: \"A corgie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(Prompt, \"mLKpDEIPxjs0bErCLsbKMx6dAM0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Prompt;\nvar _c;\n$RefreshReg$(_c, \"Prompt\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","SET_MESHID","TOGGLE_DISPLAY_MODE","CLEAR_MESH_STATUS","FETCH_URL","io","FlexRow","styles","question_icon","info_icon","ADD_MESH_STATUS","socket","cors","origin","credentials","Prompt","dispatch","density","state","home","resolution","handleSubmit","e","preventDefault","data","FormData","target","prompt","get","console","log","payload","JSON","stringify","emit","rendered","on","mesh_id","status","display","off"],"sources":["/Users/daniel/Desktop/OpenAI/ai-react-fix/src/pages/home/Prompt.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SET_MESHID, TOGGLE_DISPLAY_MODE, CLEAR_MESH_STATUS } from \"redux/slices/homeSlice\";\nimport { FETCH_URL } from \"utils/globalVariables\";\nimport io from \"socket.io-client\";\n\nimport FlexRow from \"layout/FlexRow\";\n\nimport styles from './home.module.css';\n\nimport question_icon from 'images/question.png';\nimport info_icon from 'images/info.png';\nimport { ADD_MESH_STATUS } from \"redux/slices/homeSlice\";\n\nconst socket = io(FETCH_URL, {\n    cors: {\n        origin: FETCH_URL,\n        credentials: true\n    }\n});\n\nexport default function Prompt() {\n    const dispatch = useDispatch();\n    const density = useSelector(state => state.home.density);\n    const resolution = useSelector(state => state.home.resolution);\n    //changed to websocket using flask-socketio on the backend and socket.io-client on the frontend\n    function handleSubmit(e) {\n        e.preventDefault();\n        dispatch(CLEAR_MESH_STATUS());\n        const data = new FormData(e.target);\n        const prompt = data.get('prompt-form');\n        console.log(prompt);\n        let payload = JSON.stringify({prompt: prompt, density: density, resolution: resolution})\n        //websocket for sending prompt to backend\n        socket.emit('generate mesh', payload);\n    }\n\n    let rendered = false;\n    useEffect(() => { \n        if (!rendered) {\n            socket.on('connect', () => {\n                dispatch(SET_MESHID(4));\n                console.log('connected');\n            });\n            socket.on('disconnect', () => {\n                console.log('disconnected');\n            });\n            socket.on('mesh id', (data) => {\n                dispatch(SET_MESHID(data.mesh_id));\n                console.log(data);\n            });\n            socket.on('model status', (data) => {\n                dispatch(ADD_MESH_STATUS(data.status));\n                console.log(data.status);\n            });\n            socket.on('display mode', (data) => {\n                dispatch(TOGGLE_DISPLAY_MODE(data.display));\n            });\n            return () => {\n                socket.off('connect');\n                socket.off('disconnect');\n                socket.off('mesh id');\n            }\n        }\n        rendered = true;\n    }, []);\n    \n\n\n    return (\n        <div id={styles[\"prompt\"]}>\n            <FlexRow>\n                <img src={question_icon} id={styles['question-img']} alt=\"\" />\n                <span className={styles['tooltip']} id={styles['question-tooltip']}>Type in a full descriptive sentence, as if you were writing a caption for a photo. Include as much detail as you see fit, including colors, styles, and emotions. Then click Generate to get your image.</span>\n                <img src={info_icon} id={styles['info-img']} alt=\"\" />\n                <span className={styles['tooltip']} id={styles['info-tooltip']}>This application uses a text to image AI model to generate meshes.</span>\n            </FlexRow>\n                <form onSubmit={handleSubmit}>\n                    <FlexRow gap={'15px'} alignItems={'center'}>\n                        <textarea name=\"prompt-form\" id=\"prompt-form\" defaultValue=\"A corgie\"/>\n                        <input type=\"submit\" />\n                    </FlexRow>\n                </form>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}