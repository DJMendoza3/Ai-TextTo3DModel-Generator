{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/OpenAI/ai-react-fix/src/components/ModelViewer.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport * as THREE from \"three\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { FETCH_URL } from \"utils/globalVariables\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet container;\nlet camera, scene, renderer, controls, loader, mesh, points, wireframe;\nexport default function ModelViewer() {\n  _s();\n  let meshID = useSelector(state => state.home.meshID);\n  const meshToggle = useSelector(state => state.home.modelDisplay);\n  function init() {\n    //Creating the container for the ply\n    container = document.createElement(\"div\");\n    document.getElementById(\"test-render\").appendChild(container);\n\n    //initializing the camera\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n    camera.position.z = 2;\n    camera.position.set(1, 1, 1);\n\n    //initializing the scene\n    scene = new THREE.Scene();\n    scene.add(new THREE.AxesHelper(0.5));\n\n    //initializing renderer\n    renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    //size of viewport (width, height) grab size of container and set it to renderer\n    renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    //adding renderer to DOM\n    container.appendChild(renderer.domElement);\n\n    //initializing interactive controls\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n\n    //rendering ply file\n    const plyLoader = new PLYLoader();\n    plyLoader.load(FETCH_URL + \"/models/\" + meshID, function (geometry) {\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        vertexColors: true\n      });\n      mesh = new THREE.Mesh(geometry, material);\n      wireframe = new THREE.LineSegments(geometry);\n      points = new THREE.Points(geometry, material);\n      mesh.rotateX(-Math.PI / 2);\n      wireframe.rotateX(-Math.PI / 2);\n      points.rotateX(-Math.PI / 2);\n      scene.add(mesh);\n      scene.add(wireframe);\n    },\n    // called when loading is in progress\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    },\n    // called when loading has errors\n    function (error) {\n      console.log(\"An error happened\");\n      console.log(error);\n    });\n  }\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n    controls.update();\n  }\n\n  //useEffect for reloading rederer when settingsOpen or navToggle is toggled\n  useEffect(() => {\n    const element = document.getElementById(\"test-render\");\n    //new resize observer\n    new ResizeObserver(() => {\n      if (renderer !== undefined) {\n        renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n        camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n        camera.updateProjectionMatrix();\n      }\n    }).observe(element);\n  }, []);\n\n  //useEffect for reloading rederer when window is resized\n  useEffect(() => {\n    const handleResize = () => {\n      renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n      camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered) {\n      init();\n      animate();\n      rendered = true;\n    }\n  }, []);\n  useEffect(() => {\n    if (meshToggle) {\n      scene.add(mesh);\n      scene.remove(points);\n    } else {\n      scene.remove(mesh);\n      scene.add(points);\n    }\n  }, [meshToggle]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"test-render\",\n    style: {\n      width: \"100%\",\n      flex: \"1\",\n      maxHeight: \"80%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelViewer, \"h9H0abK8iHN4JCxRX53Y4FOrWWc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["useEffect","useState","useSelector","THREE","PLYLoader","OrbitControls","FETCH_URL","container","camera","scene","renderer","controls","loader","mesh","points","wireframe","ModelViewer","meshID","state","home","meshToggle","modelDisplay","init","document","createElement","getElementById","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","z","set","Scene","add","AxesHelper","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","clientWidth","clientHeight","outputEncoding","sRGBEncoding","domElement","update","plyLoader","load","geometry","material","PointsMaterial","size","vertexColors","Mesh","LineSegments","Points","rotateX","Math","PI","xhr","console","log","loaded","total","error","animate","requestAnimationFrame","render","element","ResizeObserver","undefined","aspect","updateProjectionMatrix","observe","handleResize","addEventListener","removeEventListener","rendered","remove","width","flex","maxHeight"],"sources":["/Users/daniel/Desktop/OpenAI/ai-react-fix/src/components/ModelViewer.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport * as THREE from \"three\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport {FETCH_URL} from \"utils/globalVariables\";\n\nlet container;\nlet camera, scene, renderer, controls, loader, mesh, points, wireframe;\n\nexport default function ModelViewer() {\n  let meshID = useSelector((state) => state.home.meshID);\n\n  const meshToggle = useSelector((state) => state.home.modelDisplay);\n\n  function init() {\n    //Creating the container for the ply\n    container = document.createElement(\"div\");\n    document.getElementById(\"test-render\").appendChild(container);\n\n    //initializing the camera\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      2000\n    );\n    camera.position.z = 2;\n    camera.position.set(1, 1, 1);\n\n    //initializing the scene\n    scene = new THREE.Scene();\n    scene.add(new THREE.AxesHelper(0.5));\n\n    //initializing renderer\n    renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    //size of viewport (width, height) grab size of container and set it to renderer\n    renderer.setSize(\n      document.getElementById(\"test-render\").clientWidth,\n      document.getElementById(\"test-render\").clientHeight\n    );\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    //adding renderer to DOM\n    container.appendChild(renderer.domElement);\n\n    //initializing interactive controls\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n\n    //rendering ply file\n    const plyLoader = new PLYLoader();\n\n    plyLoader.load(\n      FETCH_URL + \"/models/\" + meshID,\n      function (geometry) {\n        const material = new THREE.PointsMaterial({\n          size: 0.01,\n          vertexColors: true,\n        });\n        mesh = new THREE.Mesh(geometry, material);\n        wireframe = new THREE.LineSegments(geometry);\n        points = new THREE.Points(geometry, material);\n        mesh.rotateX(-Math.PI / 2);\n        wireframe.rotateX(-Math.PI / 2);\n        points.rotateX(-Math.PI / 2);\n\n        scene.add(mesh);\n        scene.add(wireframe);\n      },\n      // called when loading is in progress\n      function (xhr) {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      // called when loading has errors\n      function (error) {\n        console.log(\"An error happened\");\n        console.log(error);\n      }\n    );\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n    controls.update();\n  }\n\n  //useEffect for reloading rederer when settingsOpen or navToggle is toggled\n  useEffect(() => {\n    const element = document.getElementById(\"test-render\");\n    //new resize observer\n    new ResizeObserver(() => {\n      if (renderer !== undefined) {\n        renderer.setSize(\n          document.getElementById(\"test-render\").clientWidth,\n          document.getElementById(\"test-render\").clientHeight\n        );\n        camera.aspect =\n          document.getElementById(\"test-render\").clientWidth /\n          document.getElementById(\"test-render\").clientHeight;\n        camera.updateProjectionMatrix();\n      }\n    }).observe(element);\n  }, []);\n\n  //useEffect for reloading rederer when window is resized\n  useEffect(() => {\n    const handleResize = () => {\n      renderer.setSize(\n        document.getElementById(\"test-render\").clientWidth,\n        document.getElementById(\"test-render\").clientHeight\n      );\n      camera.aspect =\n        document.getElementById(\"test-render\").clientWidth /\n        document.getElementById(\"test-render\").clientHeight;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered) {\n      init();\n      animate();\n      rendered = true;\n    }\n  }, []);\n  useEffect(() => {\n    if (meshToggle) {\n      scene.add(mesh);\n      scene.remove(points);\n    } else {\n      scene.remove(mesh);\n      scene.add(points);\n    }\n  }, [meshToggle])\n  return (\n    <div\n      id=\"test-render\"\n      style={{ width: \"100%\", flex: \"1\", maxHeight: \"80%\" }}\n    ></div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}