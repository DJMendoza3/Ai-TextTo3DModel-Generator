{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport * as THREE from \"three\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport test_mesh from \"temp_models/mesh.ply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar container;\nvar camera, scene, renderer, controls, loader;\nexport default function ModelViewer() {\n  _s();\n  const [model, setModel] = useState(null);\n\n  //fetch GET request to get model from server and set it to model\n  useEffect(() => {\n    fetch('http://10.1.10.164:5000/models/2', {\n      method: 'GET'\n    }).then(response => response.blob()).then(data => {\n      console.log(data);\n      setModel(data);\n    }).catch(err => console.log(err));\n  }, []);\n  function init(object) {\n    //Creating the container for the ply\n    container = document.createElement(\"div\");\n    document.getElementById(\"test-render\").appendChild(container);\n\n    //initializing the camera\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n    camera.position.z = 2;\n    camera.position.set(1, 1, 1);\n\n    //initializing the scene\n    scene = new THREE.Scene();\n    scene.add(new THREE.AxesHelper(.5));\n\n    //initializing renderer\n    renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    //size of viewport (width, height) grab size of container and set it to renderer\n    renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    //adding renderer to DOM\n    container.appendChild(renderer.domElement);\n\n    //initializing interactive controls\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n\n    //rendering ply file\n    const plyLoader = new PLYLoader();\n    plyLoader.load(model, function (geometry) {\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        vertexColors: true\n      });\n      const mesh = new THREE.Points(geometry, material);\n      mesh.rotateX(-Math.PI / 2);\n      scene.add(mesh);\n    },\n    // called when loading is in progress\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    },\n    // called when loading has errors\n    function (error) {\n      console.log(\"An error happened\");\n      console.log(error);\n    });\n  }\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n    controls.update();\n  }\n\n  //useEffect for reloading rederer when settingsOpen or navToggle is toggled \n  useEffect(() => {\n    const element = document.getElementById(\"test-render\");\n    //new resize observer\n    new ResizeObserver(() => {\n      if (renderer !== undefined) {\n        renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n        camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n        camera.updateProjectionMatrix();\n      }\n    }).observe(element);\n  }, []);\n\n  //useEffect for reloading rederer when window is resized \n  useEffect(() => {\n    const handleResize = () => {\n      renderer.setSize(document.getElementById(\"test-render\").clientWidth, document.getElementById(\"test-render\").clientHeight);\n      camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered && model !== null) {\n      init(test_mesh);\n      animate();\n      rendered = true;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"test-render\",\n    style: {\n      width: \"100%\",\n      flex: \"1\",\n      maxHeight: '80%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n}\n_s(ModelViewer, \"S6MxOp4ZhlMbu2Uxu+kkvun39xQ=\");\n_c = ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["useEffect","useState","useSelector","THREE","PLYLoader","OrbitControls","test_mesh","container","camera","scene","renderer","controls","loader","ModelViewer","model","setModel","fetch","method","then","response","blob","data","console","log","catch","err","init","object","document","createElement","getElementById","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","z","set","Scene","add","AxesHelper","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","clientWidth","clientHeight","outputEncoding","sRGBEncoding","domElement","update","plyLoader","load","geometry","material","PointsMaterial","size","vertexColors","mesh","Points","rotateX","Math","PI","xhr","loaded","total","error","animate","requestAnimationFrame","render","element","ResizeObserver","undefined","aspect","updateProjectionMatrix","observe","handleResize","addEventListener","removeEventListener","rendered","width","flex","maxHeight"],"sources":["/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport * as THREE from \"three\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport test_mesh from \"temp_models/mesh.ply\";\n\nvar container;\nvar camera, scene, renderer, controls, loader;\n\nexport default function ModelViewer() {\n    const [model, setModel] = useState(null);\n\n    //fetch GET request to get model from server and set it to model\n    useEffect(() => {\n        fetch('http://10.1.10.164:5000/models/2', {\n            method: 'GET',\n            })\n            .then(response => response.blob())\n            .then(data => {\n                console.log(data);\n                setModel(data);\n            })\n            .catch(err => console.log(err));\n    }, []);\n\n\n  function init(object) {\n    //Creating the container for the ply\n    container = document.createElement(\"div\");\n    document.getElementById(\"test-render\").appendChild(container);\n\n    //initializing the camera\n    camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      2000\n    );\n    camera.position.z = 2;\n    camera.position.set(1, 1, 1);\n\n    //initializing the scene\n    scene = new THREE.Scene();\n    scene.add(new THREE.AxesHelper(.5));\n\n    //initializing renderer\n    renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    //size of viewport (width, height) grab size of container and set it to renderer\n    renderer.setSize(\n      document.getElementById(\"test-render\").clientWidth,\n      document.getElementById(\"test-render\").clientHeight\n    );\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    //adding renderer to DOM\n    container.appendChild(renderer.domElement);\n\n    //initializing interactive controls\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n\n    //rendering ply file\n    const plyLoader = new PLYLoader();\n\n    plyLoader.load(\n      model,\n      function (geometry) {\n        const material = new THREE.PointsMaterial({\n          size: 0.01,\n          vertexColors: true,\n        });\n        const mesh = new THREE.Points(geometry, material);\n        mesh.rotateX(-Math.PI / 2);\n        scene.add(mesh);\n      },\n      // called when loading is in progress\n      function (xhr) {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      // called when loading has errors\n      function (error) {\n        console.log(\"An error happened\");\n        console.log(error);\n      }\n    );\n  }\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n    controls.update();\n  }\n\n\n  //useEffect for reloading rederer when settingsOpen or navToggle is toggled \n    useEffect(() => {\n        const element = document.getElementById(\"test-render\");\n        //new resize observer\n        new ResizeObserver(() => {\n            if (renderer !== undefined) {\n                renderer.setSize(\n                    document.getElementById(\"test-render\").clientWidth,\n                    document.getElementById(\"test-render\").clientHeight\n                );\n                camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n                camera.updateProjectionMatrix();\n            }\n        }).observe(element);\n    }, []);\n\n\n  //useEffect for reloading rederer when window is resized \n    useEffect(() => {\n        const handleResize = () => {\n            renderer.setSize(\n                document.getElementById(\"test-render\").clientWidth,\n                document.getElementById(\"test-render\").clientHeight\n            );\n            camera.aspect = document.getElementById(\"test-render\").clientWidth / document.getElementById(\"test-render\").clientHeight;\n            camera.updateProjectionMatrix();\n        }\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        }\n    }, []);\n\n  let rendered = false;\n  useEffect(() => {\n    if (!rendered && model !== null) {\n      init(test_mesh);\n      animate();\n      rendered = true;\n    }\n  }, []);\n  return <div id=\"test-render\" style={{ width: \"100%\", flex: \"1\", maxHeight: '80%' }}></div>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}