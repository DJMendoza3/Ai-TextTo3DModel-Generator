{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport test_mesh from \"temp_models/mesh.ply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModelViewer() {\n  _s();\n  const plyLoader = useLoader(PLYLoader, test_mesh);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: plyLoader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n// var container;\n// var camera, scene, renderer, controls, loader;\n\n// export default function ModelViewer() {\n\n//     let rendered = false;\n//     useEffect(() => {\n//         if (!rendered) {\n//             init();\n//             animate();\n//             rendered = true;\n//         }\n\n//     }, []);\n//   return <div id=\"test-render\"></div>;\n// }\n\n// function init() {\n//   //Creating the container for the ply\n//   container = document.createElement(\"div\");\n//   document.getElementById(\"test-render\").appendChild(container);\n\n//   //initializing the camera\n//   camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n//   camera.position.z = 2;\n//   camera.position.set(1, 1, 1);\n\n//   //initializing the scene\n//   scene = new THREE.Scene();\n//   scene.add(new THREE.AxesHelper(30));\n\n//   //initializing renderer\n//   renderer = new THREE.WebGLRenderer({ antialias: true });\n//   renderer.setPixelRatio(window.devicePixelRatio);\n//   renderer.setSize(window.innerWidth, window.innerHeight);\n//   renderer.outputEncoding = THREE.sRGBEncoding;\n\n//   //adding renderer to DOM\n//   container.appendChild(renderer.domElement);\n\n//   //initializing interactive controls\n//   controls = new OrbitControls(camera, renderer.domElement);\n//   controls.update();\n\n//   //rendering ply file\n//   const plyLoader = new PLYLoader();\n\n//   plyLoader.load(\n//     test_mesh,\n//     function (geometry) {\n//       const mesh = new THREE.Points(geometry);\n//       mesh.rotateX(-Math.PI / 2);\n//       scene.add(mesh);\n//     },\n//     // called when loading is in progress\n//     function (xhr) {\n//       console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n//     },\n//     // called when loading has errors\n//     function (error) {\n//       console.log(\"An error happened\");\n//       console.log(error);\n//     }\n//   );\n// }\n\n// function animate() {\n//   requestAnimationFrame(animate);\n//   renderer.render(scene, camera);\n//   controls.update();\n// }\n_s(ModelViewer, \"DZVPZteGwuKjuWiqPxQPLbOxsww=\", false, function () {\n  return [useLoader];\n});\n_c = ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["useEffect","THREE","Canvas","useLoader","PLYLoader","OrbitControls","test_mesh","ModelViewer","plyLoader"],"sources":["/Users/daniel/Desktop/OpenAI/ai-frontend/ai-react/src/components/ModelViewer.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport test_mesh from \"temp_models/mesh.ply\";\n\nexport default function ModelViewer() {\n    const plyLoader = useLoader(PLYLoader, test_mesh);\n    return(\n        <Canvas>\n            <primitive object={plyLoader} />\n        </Canvas>\n    );\n}\n\n// var container;\n// var camera, scene, renderer, controls, loader;\n\n// export default function ModelViewer() {\n\n//     let rendered = false;\n//     useEffect(() => {\n//         if (!rendered) {\n//             init();\n//             animate();\n//             rendered = true;\n//         }\n        \n//     }, []);\n//   return <div id=\"test-render\"></div>;\n// }\n\n// function init() {\n//   //Creating the container for the ply\n//   container = document.createElement(\"div\");\n//   document.getElementById(\"test-render\").appendChild(container);\n\n//   //initializing the camera\n//   camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000);\n//   camera.position.z = 2;\n//   camera.position.set(1, 1, 1);\n\n//   //initializing the scene\n//   scene = new THREE.Scene();\n//   scene.add(new THREE.AxesHelper(30));\n\n//   //initializing renderer\n//   renderer = new THREE.WebGLRenderer({ antialias: true });\n//   renderer.setPixelRatio(window.devicePixelRatio);\n//   renderer.setSize(window.innerWidth, window.innerHeight);\n//   renderer.outputEncoding = THREE.sRGBEncoding;\n\n//   //adding renderer to DOM\n//   container.appendChild(renderer.domElement);\n\n//   //initializing interactive controls\n//   controls = new OrbitControls(camera, renderer.domElement);\n//   controls.update();\n\n//   //rendering ply file\n//   const plyLoader = new PLYLoader();\n\n//   plyLoader.load(\n//     test_mesh,\n//     function (geometry) {\n//       const mesh = new THREE.Points(geometry);\n//       mesh.rotateX(-Math.PI / 2);\n//       scene.add(mesh);\n//     },\n//     // called when loading is in progress\n//     function (xhr) {\n//       console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n//     },\n//     // called when loading has errors\n//     function (error) {\n//       console.log(\"An error happened\");\n//       console.log(error);\n//     }\n//   );\n// }\n\n// function animate() {\n//   requestAnimationFrame(animate);\n//   renderer.render(scene, camera);\n//   controls.update();\n// }\n\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,SAAS,QAAQ,sCAAsC;AAChE,SAASC,aAAa,QAAQ,2CAA2C;AAEzE,OAAOC,SAAS,MAAM,sBAAsB;AAAC;AAE7C,eAAe,SAASC,WAAW,GAAG;EAAA;EAClC,MAAMC,SAAS,GAAGL,SAAS,CAACC,SAAS,EAAEE,SAAS,CAAC;EACjD,oBACI,QAAC,MAAM;IAAA,uBACH;MAAW,MAAM,EAAEE;IAAU;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC3B;AAEjB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,GA/EwBD,WAAW;EAAA,QACbJ,SAAS;AAAA;AAAA,KADPI,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}